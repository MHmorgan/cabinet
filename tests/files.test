
package require tcltest
package require http

source common.tcl
source tester.tcl

namespace import common::*
namespace import http::geturl
namespace import tcltest::test

start_cabinet
try {

array set file {
  path           files/foodir/file.txt
  content        "Hello file"
  content-type   text/plain
  content-length 10
}

# Use a large magic number to avoid worrying about time zones
set newer_time [http_time [expr [clock seconds] + 360000]]
set older_time [http_time [expr [clock seconds] - 360000]]

test file-put-1.0 "PUT request, new file" files {
  set tok [put $file(path) $file(content)]
  http::ncode $tok
} 201


# HEAD request tests

test file-head01-1.0 "HEAD request" files {
  set tok [head $file(path)]
  array set headers [http::meta $tok]
  set file(modified) $headers(last-modified)
  set file(etag)     $headers(etag)
  array unset headers
  http::ncode $tok
} 200

test file-head02-1.0 "HEAD request, for a directory" files {
  set tok [head [file dirname $file(path)]]
  http::ncode $tok
} 400

test file-head03-1.0 "HEAD request, non-existent file" files {
  set tok [head files/idontexist.md]
  http::ncode $tok
} 404


# PUT request tests

test file-put01-1.0 "PUT request, overwriting file" files {
  set tok [put $file(path) $file(content)]
  http::ncode $tok
} 204

test file-put02-1.0 "PUT request, for an existing directory" files {
  set tok [head [file dirname $file(path)]]
  http::ncode $tok
} 400

test file-put03-1.0 "PUT request, with valid If-Match header" files {
  set headers [list If-Match $file(etag)]
  set tok [put $file(path) $file(content) $headers]
  http::ncode $tok
} 204

test file-put04-1.0 "PUT request, with invalid If-Match header" files {
  set headers [list If-Match {"aaaaaaaabbbbbbbbcccccccc0000111122223333"}]
  set tok [put $file(path) $file(content) $headers]
  http::ncode $tok
} 412

test file-put05-1.0 "PUT request, with a newer unmodified since value" files {
  set headers [list If-Unmodified-Since $newer_time]
  set tok [put $file(path) $file(content) $headers]
  http::ncode $tok
} 204

test file-put06-1.0 "PUT request, with an older unmodified since value" files {
  set headers [list If-Unmodified-Since $older_time]
  set tok [put $file(path) $file(content) $headers]
  http::ncode $tok
} 412


# GET request tests

test file-get01-1.0 "GET request" files {
  set tok [get $file(path)]
  set code [http::ncode $tok]
  set body [http::data $tok]
  return "$code $body"
} "200 $file(content)"

test file-get02-1.0 "GET request, with newer modified since value" files {
  set headers [list If-Modified-Since $newer_time]
  set tok [get $file(path) $headers]
  http::ncode $tok
} 304

test file-get03-1.0 "GET request, with older modified since value" files {
  set headers [list If-Modified-Since $older_time]
  set tok [get $file(path) $headers]
  http::ncode $tok
} 200

test file-get04-1.0 "GET request, non-existent file" files {
  set tok [get files/idontexist.md]
  http::ncode $tok
} 404

test file-get05-1.0 "GET request, with matching etag" files {
  set headers [list If-None-Match $file(etag)]
  set tok [get $file(path) $headers]
  http::ncode $tok
} 304

test file-get06-1.0 "GET request, with not matching etag" files {
  set headers [list If-None-Match {"aaaaaaaabbbbbbbbcccccccc0000111122223333"}]
  set tok [get $file(path) $headers]
  http::ncode $tok
} 200


# DELETE request tests

test file-delete01-1.0 "DELETE request" files {
  set tok [delete $file(path)]
  http::ncode $tok
} 204

test file-delete02-1.0 "DELETE request, trying to delete a directory" files {
  set tok [delete [file dirname $file(path)]]
  http::ncode $tok
} 400

test file-delete03-1.0 "DELETE request, non-existent file" files {
  set tok [delete $file(path)]
  http::ncode $tok
} 404

test file-delete04-1.0 "DELETE request, with newer unmodified since value" files {
  put $file(path) $file(content)
  set headers [list If-Unmodified-Since $newer_time]
  set tok [delete $file(path) $headers]
  http::ncode $tok
} 204

test file-delete05-1.0 "DELETE request, with older unmodified since value" files {
  put $file(path) $file(content)
  set headers [list If-Unmodified-Since $older_time]
  set tok [delete $file(path) $headers]
  http::ncode $tok
} 412

test file-delete06-1.0 "DELETE request, with invalid etag" files {
  set headers [list If-Match {"aaaaaaaabbbbbbbbcccccccc0000111122223333"}]
  set tok [delete $file(path) $headers]
  http::ncode $tok
} 412

test file-delete07-1.0 "DELETE request, with valid etag" files {
  set headers [list If-Match $file(etag)]
  set tok [delete $file(path) $headers]
  http::ncode $tok
} 204

} finally {teardown_cabinet}
